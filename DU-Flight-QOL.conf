name: DU-Flight-QOL- Archaegeo v0.11 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
        local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
        local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local torqueFactor = 2 --export: Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
        local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        local a=0;local b=0;local c=0;local d=0;script={}function script.onStart()VERSION_NUMBER=0.11;Nav=Navigator.new(system,core,unit)Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal,{1000,5000,10000,20000,30000})Nav.axisCommandManager:setTargetGroundAltitude(4)_autoconf.displayCategoryPanel(weapon,weapon_size,L_TEXT("ui_lua_widget_weapon", "Weapons"),"weapon",true)core.show()_autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_periscope", "Periscope"),"periscope")placeRadar=true;if atmofueltank_size>0 then _autoconf.displayCategoryPanel(atmofueltank,atmofueltank_size,L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"),"fuel_container")if placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")placeRadar=false end end;if spacefueltank_size>0 then _autoconf.displayCategoryPanel(spacefueltank,spacefueltank_size,L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"),"fuel_container")if placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")placeRadar=false end end;_autoconf.displayCategoryPanel(rocketfueltank,rocketfueltank_size,L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"),"fuel_container")if placeRadar then _autoconf.displayCategoryPanel(radar,radar_size,L_TEXT("ui_lua_widget_radar", "Radar"),"radar")placeRadar=false end;if antigrav~=nil then antigrav.show()end;if warpdrive~=nil then warpdrive.show()end;if gyro~=nil then gyro.show()end;if Nav.control.isRemoteControlled()==1 then system.freeze(1)end;gearExtended=Nav.control.isAnyLandingGearExtended()==1;if gearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end end;function script.onStop()_autoconf.hideCategoryPanels()if antigrav~=nil then antigrav.hide()end;if warpdrive~=nil then warpdrive.hide()end;if gyro~=nil then gyro.hide()end;core.hide()Nav.control.switchOffHeadlights()end;function script.onActionLoop(e)if e=="groundaltitudeup"then Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)elseif e=="groundaltitudedown"then Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)elseif e=="brake"then local f=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if f==axisCommandType.byTargetSpeed then local g=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if math.abs(g)>constants.epsilon then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-utils.sign(g))end end elseif e=="speedup"then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,1.0)elseif e=="speeddown"then Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal,-1.0)end end;function script.onActionStart(e)if e=="gear"then gearExtended=not gearExtended;if gearExtended then Nav.control.extendLandingGears()else Nav.control.retractLandingGears()end elseif e=="light"then if Nav.control.isAnyHeadlightSwitchedOn()==1 then Nav.control.switchOffHeadlights()else Nav.control.switchOnHeadlights()end elseif e=="forward"then a=a-1 elseif e=="backward"then a=a+1 elseif e=="left"then b=b-1 elseif e=="right"then b=b+1 elseif e=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif e=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif e=="up"then Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif e=="down"then Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif e=="groundaltitudeup"then Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)elseif e=="groundaltitudedown"then Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)elseif e=="yawright"then c=c-1 elseif e=="yawleft"then c=c+1 elseif e=="brake"then d=d+1;local f=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if f==axisCommandType.byTargetSpeed then local g=Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)if math.abs(g)>constants.epsilon then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-utils.sign(g))end end elseif e=="booster"then Nav:toggleBoosters()elseif e=="stopengines"then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)elseif e=="speedup"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,5.0)elseif e=="speeddown"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal,-5.0)elseif e=="antigravity"then if antigrav~=nil then antigrav.toggle()end elseif e=="warp"then if warpdrive~=nil then warpdrive.activateWarp()end end end;function onUpdate()Nav:update()end;function script.onActionStop(e)if e=="forward"then a=a+1 elseif e=="backward"then a=a-1 elseif e=="left"then b=b+1 elseif e=="right"then b=b-1 elseif e=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif e=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif e=="up"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif e=="down"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()elseif e=="yawright"then c=c+1 elseif e=="yawleft"then c=c-1 elseif e=="brake"then d=d-1 end end;function script.onTick(h)screen.setCenteredText("timer "..h.." ticked")end;function script.onFlush()pitchSpeedFactor=math.max(pitchSpeedFactor,0.01)yawSpeedFactor=math.max(yawSpeedFactor,0.01)rollSpeedFactor=math.max(rollSpeedFactor,0.01)torqueFactor=math.max(torqueFactor,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)autoRollFactor=math.max(autoRollFactor,0.01)turnAssistFactor=math.max(turnAssistFactor,0.01)local i=a+system.getControlDeviceForwardInput()local j=b+system.getControlDeviceYawInput()local k=c-system.getControlDeviceLeftRightInput()local l=d;local m=vec3(core.getWorldVertical())local n=vec3(core.getConstructWorldOrientationUp())local o=vec3(core.getConstructWorldOrientationForward())local p=vec3(core.getConstructWorldOrientationRight())local q=vec3(core.getWorldVelocity())local r=vec3(core.getWorldVelocity()):normalize()local s=getRoll(m,o,p)local t=math.abs(s)local u=utils.sign(s)local v=vec3(core.getWorldAngularVelocity())local w=i*pitchSpeedFactor*p+j*rollSpeedFactor*o+k*yawSpeedFactor*n;if m:len()>0.01 and unit.getAtmosphereDensity()>0.0 then local x=1.0;if autoRoll==true and t>x and j==0 then local y=utils.clamp(0,t-30,t+30)if rollPID==nil then rollPID=pid.new(autoRollFactor*0.01,0,autoRollFactor*0.1)end;rollPID:inject(y-s)local z=rollPID:get()w=w+z*o end;local A=20.0;if turnAssist==true and t>A and i==0 and k==0 then local B=turnAssistFactor*0.1;local C=turnAssistFactor*0.025;local D=(t-A)/(180-A)*180;local E=0;if D<90 then E=D/90 elseif D<180 then E=(180-D)/90 end;E=E*E;local F=-u*C*(1.0-E)local G=B*E;w=w+G*p+F*n end end;local H=1;local I=0;local J=1;local K=torqueFactor*(w-v)local L=vec3(core.getWorldAirFrictionAngularAcceleration())K=K-L;Nav:setEngineTorqueCommand('torque',K,H,'airfoil','','',J)local M=-l*(brakeSpeedFactor*q+brakeFlatFactor*r)Nav:setEngineForceCommand('brake',M)local N=''local O=vec3()local P=false;local Q='thrust analog longitudinal'local f=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if f==axisCommandType.byThrottle then local R=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(Q,axisCommandId.longitudinal)Nav:setEngineForceCommand(Q,R,H)elseif f==axisCommandType.byTargetSpeed then local R=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)N=N..' , '..Q;O=O+R;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then P=true end end;local S='thrust analog lateral'local T=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if T==axisCommandType.byThrottle then local U=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(S,axisCommandId.lateral)Nav:setEngineForceCommand(S,U,H)elseif T==axisCommandType.byTargetSpeed then local V=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)N=N..' , '..S;O=O+V end;local W='thrust analog vertical'local X=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if X==axisCommandType.byThrottle then local Y=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(W,axisCommandId.vertical)Nav:setEngineForceCommand(W,Y,H,'airfoil','ground','',J)elseif X==axisCommandType.byTargetSpeed then local Z=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)N=N..' , '..W;O=O+Z end;if O:len()>constants.epsilon then if d~=0 or P or math.abs(r:dot(o))<0.95 then N=N..', brake'end;Nav:setEngineForceCommand(N,O,I,'','','',J)end;Nav:setBoosterCommand('rocket_engine')end;function script.onMouseDown(_,a0)end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
